{"version":3,"sources":["app/Pages/Register/Register.js","app/Shared/Components/Alert/Alert.js","app/Shared/Utils/formInput.js","app/Shared/Components/Form/Input.js","app/Shared/hoc/UnAuthRoutes.js"],"names":["Register","state","formInput","name","email","password","passwordConfirm","showAlert","onChangeHandler","e","onChangeFormInput","setState","onSubmitHandler","a","preventDefault","props","registerUser","clearFields","onCloseHandler","closeAlertTimer","setTimeout","registerStatus","data","status","history","replace","clearTimeout","this","show","message","close","className","onSubmit","autoComplete","inputtype","type","label","onChange","value","minLength","registerInit","variant","Component","connect","auth","user","dispatch","authActions","Alert","target","stateCopy","Object","keys","map","el","Input","required","id","placeholder","markup","formGroupClass","UnAuthRoutes","checkAuthState","checkAuthInit","role","to","children"],"mappings":"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","file":"static/js/17.8f3e7dca.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Input from '../../Shared/Components/Form/Input';\r\n\r\nimport * as authActions from '../../Store/actions/auth';\r\n\r\nimport { onChangeFormInput, clearFields } from '../../Shared/Utils/formInput';\r\n\r\nimport Alert from '../../Shared/Components/Alert/Alert';\r\nimport UnAuthRoutes from '../../Shared/hoc/UnAuthRoutes';\r\n\r\n\r\nclass Register extends Component {\r\n    state = {\r\n        formInput: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            passwordConfirm: ''\r\n        },\r\n        showAlert: false\r\n    }\r\n\r\n    onChangeHandler = e => {\r\n        let formInput = onChangeFormInput(e, { ...this.state })\r\n        this.setState({ ...formInput })\r\n    }\r\n\r\n    onSubmitHandler = async e => {\r\n        e.preventDefault();\r\n        await this.props.registerUser(this.state.formInput)\r\n        let formInput = clearFields(this.state);\r\n\r\n        this.setState({ formInput, showAlert: true })\r\n    }\r\n\r\n    onCloseHandler = () => {\r\n        this.closeAlertTimer = setTimeout(() => {\r\n            this.setState({ showAlert: false });\r\n            if (this.props.registerStatus.data.status === 'success') {\r\n                this.props.history.replace('/login')\r\n            }\r\n        }, 2000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.closeAlertTimer);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <UnAuthRoutes>\r\n                {this.state.showAlert && this.props.registerStatus &&\r\n                    <Alert\r\n                        show={this.state.showAlert}\r\n                        status={this.props.registerStatus === 'success' ? this.props.registerStatus : this.props.registerStatus.data.status}\r\n                        message={this.props.registerStatus.data.status === 'success'\r\n                            ? \"User Created Successfully\"\r\n                            : this.props.registerStatus.data.message}\r\n                        close={this.onCloseHandler()}\r\n                    />}\r\n                <section className=\"register\">\r\n\r\n                    <form className=\"register__form\" onSubmit={this.onSubmitHandler} autoComplete=\"off\">\r\n                        <div className=\"form__group\">\r\n                            <h2 className=\"heading-1 u-text-primary u-ftwt-400\">Create an Account</h2>\r\n                        </div>\r\n                        <Input\r\n                            name=\"name\"\r\n                            inputtype=\"input\"\r\n                            type=\"text\"\r\n                            label=\"Name\"\r\n                            onChange={this.onChangeHandler}\r\n                            value={this.state.formInput.name}\r\n                        />\r\n\r\n                        <Input\r\n                            name=\"email\"\r\n                            inputtype=\"input\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            onChange={this.onChangeHandler}\r\n                            value={this.state.formInput.email}\r\n                        />\r\n\r\n                        <Input\r\n                            name=\"password\"\r\n                            inputtype=\"input\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            onChange={this.onChangeHandler}\r\n                            value={this.state.formInput.password}\r\n                            minLength={6}\r\n                        />\r\n\r\n                        <Input\r\n                            name=\"passwordConfirm\"\r\n                            inputtype=\"input\"\r\n                            type=\"password\"\r\n                            label=\"Password Confirm\"\r\n                            onChange={this.onChangeHandler}\r\n                            value={this.state.formInput.passwordConfirm}\r\n                            minLength={6}\r\n                        />\r\n\r\n                        <Input\r\n                            inputtype='submit'\r\n                            value={!this.props.registerInit ? 'Register' : 'Loading....'}\r\n                            variant=\"tertiary\" />\r\n                    </form>\r\n                </section>\r\n            </UnAuthRoutes>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        registerInit: state.auth.registerInit,\r\n        registerStatus: state.auth.registerStatus,\r\n        user: state.auth.user,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        registerUser: (data) => dispatch(authActions.register(data)),\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","import React from 'react';\r\n\r\nconst Alert = props => {\r\n    return (\r\n        <div className={`alert alert__${props.show} alert--${props.status} ${props.className}`}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","export const onChangeFormInput = (e, state) => {\r\n    return {\r\n        ...state,\r\n        formInput: {\r\n            ...state.formInput,\r\n            [e.target.name]: e.target.value\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearFields = (state) => {\r\n    let stateCopy = { ...state.formInput };\r\n    let formInput = {};\r\n    Object.keys(stateCopy).map(el => {\r\n        return formInput[el] = ''\r\n    })\r\n    return formInput;\r\n}","import React from 'react'\r\n\r\nconst Input = props => {\r\n    if (props.inputtype === 'input') {\r\n        let required = props.required === false ? false : true;\r\n        return (\r\n            <div className={`form__group `}>\r\n                <label className=\"form__label\">{props.label}</label>\r\n                <input\r\n                    type={props.type}\r\n                    name={props.name}\r\n                    id={props.name}\r\n                    placeholder={props.placeholder}\r\n                    className={`form__${props.inputtype} ${props.className}`}\r\n                    onChange={props.onChange}\r\n                    minLength={props.minLength}\r\n                    value={props.value}\r\n                    required={required}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (props.inputtype === 'submit') {\r\n        let markup = <input type=\"submit\"\r\n            value={props.value}\r\n            className={`btn btn__${props.variant} ${props.className}`}\r\n            {...props}\r\n        />\r\n\r\n        return (\r\n            <div className={`form__group ${props.formGroupClass}`}>\r\n                {markup}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport * as authActions from '../../Store/actions/auth';\r\nimport { Redirect } from 'react-router';\r\nimport Loader from '../Components/Loader/Loader';\r\n\r\n\r\nclass UnAuthRoutes extends Component {\r\n    async componentDidMount() {\r\n        // if (this.props.user) {\r\n        await this.props.checkAuthState();\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.user) {\r\n            return this.props.children\r\n        }\r\n\r\n        if (this.props.checkAuthInit) {\r\n            return <div className=\"u-flex-center u-vh-100 u-bg-white\">\r\n                <Loader />\r\n            </div>\r\n        }\r\n\r\n        if (this.props.user && this.props.user.role === 'admin') {\r\n            return <Redirect to=\"/dashboard/manage-orders\" />\r\n        }\r\n\r\n        if (this.props.user && (!this.props.user.role || this.props.user.role !== 'admin')) {\r\n            return <Redirect to=\"/menu\" />\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.auth.user,\r\n        checkAuthInit: state.auth.checkAuthInit\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        checkAuthState: () => dispatch(authActions.checkAuth()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UnAuthRoutes);"],"sourceRoot":""}