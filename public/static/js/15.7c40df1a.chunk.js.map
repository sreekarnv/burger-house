{"version":3,"sources":["app/Pages/DashBoard/Admin/Ingredients/IngredientsForm.js","app/Shared/Components/Alert/Alert.js","app/Shared/Utils/formInput.js","app/Shared/Components/Form/Input.js","app/Store/actions/ingredients.js"],"names":["IngredientsCreate","state","formInput","name","price","foodType","photo","previewPhoto","fileUploaded","alert","show","status","message","onChangeHandler","e","onChangeFormInput","setState","onFileChangeHandler","target","files","URL","createObjectURL","showAlertHandler","onCloseHandler","closeAlertTimer","setTimeout","onSubmitHandler","props","location","pathname","startsWith","onCreateHandler","onUpdateHandler","a","preventDefault","formData","FormData","append","createIngredient","createIngredientsStatus","updateIngredient","match","params","id","updateIngredientsStatus","ingredient","this","getIngredient","getIngredientStatus","createIngredientsInit","updateIngredientsInit","getIngredientInit","className","Fragment","close","onClick","history","goBack","autoComplete","onSubmit","inputtype","type","label","value","onChange","htmlFor","style","display","src","alt","variant","Component","connect","ingredients","dispatch","ingredientActions","ing","Alert","clearFields","stateCopy","Object","keys","map","el","Input","required","placeholder","minLength","markup","formGroupClass","getIngredients","axios","method","url","res","data","actionTypes","error","response","createIngredientSuccess","updateIngredientSuccess","deleteIngredient"],"mappings":"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","file":"static/js/15.7c40df1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Input from '../../../../Shared/Components/Form/Input';\r\n\r\nimport { onChangeFormInput } from '../../../../Shared/Utils/formInput';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as ingredientActions from '../../../../Store/actions/ingredients';\r\nimport Loader from '../../../../Shared/Components/Loader/Loader';\r\nimport Alert from '../../../../Shared/Components/Alert/Alert';\r\n\r\nclass IngredientsCreate extends Component {\r\n    state = {\r\n        formInput: {\r\n            name: '',\r\n            price: '',\r\n            foodType: 'none',\r\n            photo: ''\r\n        },\r\n        previewPhoto: '',\r\n        fileUploaded: false,\r\n        alert: {\r\n            show: false,\r\n            status: '',\r\n            message: '',\r\n        },\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (!this.props.location.pathname.startsWith('/dashboard/manage-ingredients/new')) {\r\n            await this.props.getIngredient(this.props.match.params.id);\r\n            if (this.props.getIngredientStatus === 'success') {\r\n                this.setState({\r\n                    formInput: {\r\n                        name: this.props.ingredient.name,\r\n                        price: this.props.ingredient.price,\r\n                        foodType: this.props.ingredient.foodType,\r\n                        photo: this.props.ingredient.photo\r\n                    },\r\n                    previewPhoto: this.props.ingredient.photo\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onChangeHandler = e => {\r\n        let formInput = onChangeFormInput(e, { ...this.state })\r\n        this.setState({ ...formInput })\r\n    }\r\n\r\n    onFileChangeHandler = e => {\r\n        this.setState({\r\n            ...this.state,\r\n            formInput: {\r\n                ...this.state.formInput,\r\n                photo: e.target.files[0]\r\n            },\r\n            fileUploaded: true,\r\n            previewPhoto: URL.createObjectURL(e.target.files[0])\r\n        })\r\n    }\r\n\r\n    showAlertHandler = (message, status) => {\r\n        this.setState({\r\n            ...this.state,\r\n            alert: {\r\n                show: true,\r\n                status,\r\n                message,\r\n            }\r\n        })\r\n    }\r\n\r\n    onCloseHandler = () => {\r\n        this.closeAlertTimer = setTimeout(() => {\r\n            this.setState({\r\n                ...this.state,\r\n                alert: {\r\n                    show: false, status: '', message: ''\r\n                }\r\n            });\r\n        }, 2000)\r\n    }\r\n\r\n    onSubmitHandler = e => {\r\n        if (this.props.location.pathname.startsWith('/dashboard/manage-ingredients/new')) {\r\n            return this.onCreateHandler(e);\r\n        } else {\r\n            return this.onUpdateHandler(e);\r\n        }\r\n    }\r\n\r\n    onCreateHandler = async e => {\r\n        e.preventDefault();\r\n        let formData = new FormData();\r\n        formData.append('name', this.state.formInput.name);\r\n        formData.append('price', this.state.formInput.price);\r\n        formData.append('foodType', this.state.formInput.foodType);\r\n        formData.append('photo', this.state.formInput.photo);\r\n\r\n        await this.props.createIngredient(formData);\r\n\r\n        let message, status;\r\n        if (this.props.createIngredientsStatus.status === 'success') {\r\n            status = this.props.createIngredientsStatus.status\r\n            message = 'Ingredient created Successfully'\r\n        } else {\r\n            status = this.props.createIngredientsStatus.status;\r\n            message = this.props.createIngredientsStatus.message;\r\n        }\r\n        this.showAlertHandler(message, status)\r\n    }\r\n\r\n    onUpdateHandler = async e => {\r\n        e.preventDefault();\r\n        let formData = new FormData();\r\n        formData.append('name', this.state.formInput.name);\r\n        formData.append('price', this.state.formInput.price);\r\n        formData.append('foodType', this.state.formInput.foodType);\r\n\r\n        if (this.state.fileUploaded) {\r\n            formData.append('photo', this.state.formInput.photo);\r\n        }\r\n\r\n        await this.props.updateIngredient(formData, this.props.match.params.id);\r\n\r\n        let message, status;\r\n        if (this.props.updateIngredientsStatus.status === 'success') {\r\n            status = this.props.updateIngredientsStatus.status\r\n            message = 'Updated Ingredient Successfully'\r\n\r\n            this.setState({\r\n                formInput: {\r\n                    ...this.state.formInput,\r\n                    name: this.props.ingredient.name,\r\n                    foodType: this.props.ingredient.foodType,\r\n                    price: this.props.ingredient.price,\r\n                    photo: this.props.ingredient.photo\r\n                },\r\n                previewPhoto: this.props.ingredient.photo\r\n            })\r\n\r\n        } else {\r\n            status = this.props.updateIngredientsStatus.status;\r\n            message = this.props.updateIngredientsStatus.message;\r\n        }\r\n        this.showAlertHandler(message, status)\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.props.createIngredientsInit ||\r\n            this.props.updateIngredientsInit ||\r\n            this.props.getIngredientInit) {\r\n            return <div className=\"dashboard__dashboard u-vh-100 u-bg-white u-flex-center\">\r\n                <Loader />\r\n            </div>\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.alert.status && <Alert\r\n                    close={this.onCloseHandler()}\r\n                    show={this.state.alert.show}\r\n                    status={this.state.alert.status}\r\n                    message={this.state.alert.message}\r\n                />}\r\n                <div className=\"ingredients__form dashboard__dashboard\">\r\n                    <h2 className=\"heading-1 u-text-primary ingredients__form-heading\">\r\n                        {this.props.location.pathname.startsWith('/dashboard/manage-ingredients/new')\r\n                            ? 'Create a New Ingredient' : `Update Ingredient ${this.state.formInput.name}`}\r\n                    </h2>\r\n                    <button\r\n                        onClick={() => this.props.history.goBack()}\r\n                        className=\"btn  btn__tertiary-back ingredients__form-back-btn\">\r\n                        <span>&larr;</span>Back\r\n                    </button>\r\n                    <form className=\"ingredients__form-form\" autoComplete=\"off\"\r\n                        onSubmit={this.onSubmitHandler}\r\n                    >\r\n                        <Input\r\n                            inputtype=\"input\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            label=\"name\"\r\n                            value={this.state.formInput.name}\r\n                            onChange={this.onChangeHandler}\r\n                        />\r\n\r\n                        <Input\r\n                            inputtype=\"input\"\r\n                            type=\"number\"\r\n                            name=\"price\"\r\n                            label=\"price\"\r\n                            value={this.state.formInput.price}\r\n                            onChange={this.onChangeHandler}\r\n                        />\r\n\r\n                        <div className=\"form__group\">\r\n                            <label htmlFor=\"foodType\" className=\"form__label\">Diet</label>\r\n                            <select name=\"foodType\" id=\"foodType\" className=\"form__input\"\r\n                                value={this.state.formInput.foodType}\r\n                                onChange={this.onChangeHandler}\r\n                            >\r\n                                <option value=\"none\">None</option>\r\n                                <option value=\"vegetarian\">Vegetarian</option>\r\n                                <option value=\"non-vegetarian\">Non Vegetarian</option>\r\n                            </select>\r\n                            <small className=\"form__small\">Select none if you want that ingredient to appear in both veg and non-veg sections</small>\r\n                        </div>\r\n\r\n                        <div className=\"form__group u-flex-between\">\r\n                            <div>\r\n                                <input type=\"file\" id=\"photo\" onChange={this.onFileChangeHandler} style={{ display: 'none' }} />\r\n                                <label htmlFor=\"photo\" className=\"btn btn__tertiary-goTo btn__sm\">Choose Image</label>\r\n                            </div>\r\n                            <div className=\"ingredients-preview-img-bg \">\r\n                                <img src={this.state.previewPhoto} className=\"ingredients-preview-img-image\" alt={this.state.formInput.name} />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Input\r\n                            inputtype=\"submit\"\r\n                            variant=\"tertiary\"\r\n                            value=\"Save Ingredient\"\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredient: state.ingredients.ingredient,\r\n\r\n        getIngredientStatus: state.ingredients.getIngredientStatus,\r\n        getIngredientInit: state.ingredients.getIngredientInit,\r\n\r\n        createIngredientsStatus: state.ingredients.createIngredientsStatus,\r\n        createIngredientsInit: state.ingredients.createIngredientsInit,\r\n\r\n        updateIngredientsStatus: state.ingredients.updateIngredientsStatus,\r\n        updateIngredientsInit: state.ingredients.updateIngredientsInit,\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getIngredient: (id) => dispatch(ingredientActions.getIngredient(id)),\r\n        createIngredient: (ing) => dispatch(ingredientActions.createIngredient(ing)),\r\n        updateIngredient: (ing, id) => dispatch(ingredientActions.updateIngredient(ing, id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IngredientsCreate);","import React from 'react';\r\n\r\nconst Alert = props => {\r\n    return (\r\n        <div className={`alert alert__${props.show} alert--${props.status} ${props.className}`}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","export const onChangeFormInput = (e, state) => {\r\n    return {\r\n        ...state,\r\n        formInput: {\r\n            ...state.formInput,\r\n            [e.target.name]: e.target.value\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearFields = (state) => {\r\n    let stateCopy = { ...state.formInput };\r\n    let formInput = {};\r\n    Object.keys(stateCopy).map(el => {\r\n        return formInput[el] = ''\r\n    })\r\n    return formInput;\r\n}","import React from 'react'\r\n\r\nconst Input = props => {\r\n    if (props.inputtype === 'input') {\r\n        let required = props.required === false ? false : true;\r\n        return (\r\n            <div className={`form__group `}>\r\n                <label className=\"form__label\">{props.label}</label>\r\n                <input\r\n                    type={props.type}\r\n                    name={props.name}\r\n                    id={props.name}\r\n                    placeholder={props.placeholder}\r\n                    className={`form__${props.inputtype} ${props.className}`}\r\n                    onChange={props.onChange}\r\n                    minLength={props.minLength}\r\n                    value={props.value}\r\n                    required={required}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (props.inputtype === 'submit') {\r\n        let markup = <input type=\"submit\"\r\n            value={props.value}\r\n            className={`btn btn__${props.variant} ${props.className}`}\r\n            {...props}\r\n        />\r\n\r\n        return (\r\n            <div className={`form__group ${props.formGroupClass}`}>\r\n                {markup}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input\r\n","import * as actionTypes from './actions';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const getIngredientsInit = () => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENTS_INIT\r\n    }\r\n}\r\n\r\nexport const getIngredientsSuccess = data => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENTS_SUCCESS,\r\n        res: data\r\n    }\r\n}\r\n\r\nexport const getIngredientsFailed = error => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENTS_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const getIngredients = () => {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'get',\r\n                url: `/api/v1/ingredients`\r\n            })\r\n\r\n\r\n            dispatch(getIngredientsSuccess(res.data))\r\n\r\n        } catch (err) {\r\n            dispatch(getIngredientsFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////////\r\n// CREATE INGREDIENTS\r\n\r\nexport const createIngredientInit = () => {\r\n    return {\r\n        type: actionTypes.CREATE_INGREDIENTS_INIT\r\n    }\r\n}\r\n\r\nexport const createIngredientSuccess = data => {\r\n    return {\r\n        type: actionTypes.CREATE_INGREDIENTS_SUCCESS,\r\n        res: data\r\n    }\r\n}\r\n\r\nexport const createIngredientFailed = error => {\r\n    return {\r\n        type: actionTypes.CREATE_INGREDIENTS_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const createIngredient = (data) => {\r\n    return async dispatch => {\r\n        dispatch(createIngredientInit());\r\n        try {\r\n            const res = await axios({\r\n                method: 'POST',\r\n                url: `/api/v1/ingredients`,\r\n                data\r\n            })\r\n\r\n\r\n            dispatch(createIngredientSuccess(res.data))\r\n\r\n        } catch (err) {\r\n            dispatch(createIngredientFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n// get Ingredient\r\n\r\n\r\nexport const getIngredientInit = () => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENT_INIT\r\n    }\r\n}\r\n\r\nexport const getIngredientSuccess = data => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENT_SUCCESS,\r\n        res: data\r\n    }\r\n}\r\n\r\nexport const getIngredientFailed = error => {\r\n    return {\r\n        type: actionTypes.GET_INGREDIENT_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const getIngredient = (id) => {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await axios({\r\n                method: 'get',\r\n                url: `${URL}/api/v1/ingredients/${id}`\r\n            })\r\n\r\n            dispatch(getIngredientSuccess(res.data))\r\n\r\n        } catch (err) {\r\n            dispatch(getIngredientFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// UPDATE INGREDIENTS\r\n\r\n\r\nexport const updateIngredientInit = () => {\r\n    return {\r\n        type: actionTypes.UPDATE_INGREDIENT_INIT\r\n    }\r\n}\r\n\r\nexport const updateIngredientSuccess = data => {\r\n    return {\r\n        type: actionTypes.UPDATE_INGREDIENT_SUCCESS,\r\n        res: data\r\n    }\r\n}\r\n\r\nexport const updateIngredientFailed = error => {\r\n    return {\r\n        type: actionTypes.UPDATE_INGREDIENT_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const updateIngredient = (data, id) => {\r\n    return async dispatch => {\r\n        dispatch(updateIngredientInit());\r\n        try {\r\n            const res = await axios({\r\n                method: 'PATCH',\r\n                url: `${URL}/api/v1/ingredients/${id}`,\r\n                data\r\n            })\r\n\r\n            dispatch(updateIngredientSuccess(res.data))\r\n\r\n        } catch (err) {\r\n            dispatch(updateIngredientFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////////////\r\n// DELETE ingredient\r\n\r\nexport const deleteIngredientInit = () => {\r\n    return {\r\n        type: actionTypes.DELETE_INGREDIENT_INIT\r\n    }\r\n}\r\n\r\nexport const deleteIngredientSuccess = data => {\r\n    return {\r\n        type: actionTypes.DELETE_INGREDIENT_SUCCESS,\r\n        res: data\r\n    }\r\n}\r\n\r\nexport const deleteIngredientFailed = error => {\r\n    return {\r\n        type: actionTypes.DELETE_INGREDIENT_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const deleteIngredient = (id) => {\r\n    return async dispatch => {\r\n        dispatch(deleteIngredientInit());\r\n        try {\r\n            const res = await axios({\r\n                method: 'DELETE',\r\n                url: `${URL}/api/v1/ingredients/${id}`,\r\n            })\r\n\r\n            dispatch(deleteIngredientSuccess(res.data))\r\n            dispatch(getIngredients());\r\n        } catch (err) {\r\n            dispatch(deleteIngredientFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}