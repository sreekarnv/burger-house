{"version":3,"sources":["app/Pages/DashBoard/User/CurrentUserOrders.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","app/Shared/Utils/formInput.js","app/Store/actions/orders.js","app/Shared/Components/List/ListItem.js","app/Pages/DashBoard/components/StatusCard.js","app/Pages/DashBoard/User/components/ListItemOrders.js","app/Pages/DashBoard/components/Orders.js"],"names":["CurrentUserOrders","orders","this","props","userOrders","loading","userOrdersInit","getAllOrders","getAllUserOrders","heading","showOrdersStatus","Component","connect","state","getUserOrdersInit","user","auth","dispatch","orderActions","_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","Object","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","onChangeFormInput","e","formInput","target","value","clearFields","stateCopy","keys","map","el","getAllUserOrdersFailed","error","type","actionTypes","a","axios","get","res","order","data","customOrders","menuOrders","response","createOrdersFailed","createOrders","method","url","clearCart","getAllOrdersSuccess","totalOrders","pendingOrders","completedOrders","totalPrice","getAllOrdersFailed","filter","query","res2","push","status","price","updateOrderStatusAdminSuccess","updateOrderStatusAdmin","_id","getOrderSuccess","getOrder","id","ingredients","title","foodType","photo","items","parseInt","ListItem","to","className","style","listStyle","children","StatusCard","ListItemOrders","date","split","hours","Date","getHours","minutes","getMinutes","seconds","getSeconds","time","results","Orders","onChangeHandler","setState","onFilterHandler","history","Loader","totalOrdersPrice","toFixed","totalCancelledOrders","totalCompletedOrders","totalPendingOrders","onChange","onClick","createdAt","match"],"mappings":"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","file":"static/js/10.82ec5f2e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Orders from '../components/Orders';\r\n\r\nimport * as orderActions from '../../../Store/actions/orders';\r\n\r\nclass CurrentUserOrders extends Component {\r\n    render() {\r\n        return <Orders\r\n            orders={this.props.userOrders}\r\n            loading={this.props.userOrdersInit}\r\n            getAllOrders={this.props.getAllUserOrders}\r\n            heading=\"My Orders\"\r\n            showOrdersStatus={false}\r\n            {...this.props}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userOrdersInit: state.orders.getUserOrdersInit,\r\n        userOrders: state.orders.userOrders,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getAllUserOrders: () => dispatch(orderActions.getAllUserOrders()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentUserOrders);\r\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export const onChangeFormInput = (e, state) => {\r\n    return {\r\n        ...state,\r\n        formInput: {\r\n            ...state.formInput,\r\n            [e.target.name]: e.target.value\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearFields = (state) => {\r\n    let stateCopy = { ...state.formInput };\r\n    let formInput = {};\r\n    Object.keys(stateCopy).map(el => {\r\n        return formInput[el] = ''\r\n    })\r\n    return formInput;\r\n}","import * as actionTypes from './actions';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const getAllUserOrdersInit = () => {\r\n    return {\r\n        type: actionTypes.GET_ALL_USER_ORDERS_INIT\r\n    }\r\n}\r\n\r\nexport const getAllUserOrdersSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.GET_ALL_USER_ORDERS_SUCCESS,\r\n        orders\r\n    }\r\n}\r\n\r\nexport const getAllUserOrdersFailed = error => {\r\n    return {\r\n        type: actionTypes.GET_ALL_USER_ORDERS_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\n\r\nexport const getAllUserOrders = () => {\r\n    return async dispatch => {\r\n        dispatch(getAllUserOrdersInit());\r\n        try {\r\n            const res = await axios.get(`/api/v1/orders/me`)\r\n            let order = Object.keys(res.data.orders).map(el => {\r\n                return {\r\n                    ...res.data.orders[el],\r\n                    orders: [...res.data.orders[el].customOrders, ...res.data.orders[el].menuOrders],\r\n                    customOrders: null,\r\n                    menuOrders: null,\r\n                }\r\n            })\r\n            dispatch(getAllUserOrdersSuccess(order));\r\n        } catch (err) {\r\n            const error = { ...err }.response\r\n            dispatch(getAllUserOrdersFailed(error));\r\n        }\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport const createOrdersInit = () => {\r\n    return {\r\n        type: actionTypes.CREATE_ORDER_INIT\r\n    }\r\n}\r\n\r\nexport const createOrdersSuccess = (orders) => {\r\n    return {\r\n        type: actionTypes.CREATE_ORDER_SUCCESS,\r\n        orders\r\n    }\r\n}\r\n\r\nexport const createOrdersFailed = error => {\r\n    return {\r\n        type: actionTypes.CREATE_ORDER_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const createOrders = (data) => {\r\n    return async dispatch => {\r\n        dispatch(createOrdersInit());\r\n        try {\r\n            const res = await axios({\r\n                method: 'POST',\r\n                url: `/api/v1/orders`,\r\n                data\r\n            })\r\n            dispatch(createOrdersSuccess(res.data.orders))\r\n        } catch (err) {\r\n            const error = { ...err }.response\r\n            dispatch(createOrdersFailed(error));\r\n        }\r\n    }\r\n}\r\n///////////////////////////////////////////////////////////////////////////////\r\nexport const clearCart = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_CART\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////\r\nexport const getAllOrdersInit = () => {\r\n    return {\r\n        type: actionTypes.GET_ALL_ORDERS_INIT\r\n    }\r\n}\r\n\r\nexport const getAllOrdersSuccess = ({ order, totalOrders, pendingOrders, completedOrders, totalPrice }) => {\r\n    return {\r\n        type: actionTypes.GET_ALL_ORDERS_SUCCESS,\r\n        orders: order,\r\n        totalOrders,\r\n        pendingOrders,\r\n        completedOrders,\r\n        totalPrice\r\n    }\r\n}\r\n\r\nexport const getAllOrdersFailed = error => {\r\n    return {\r\n        type: actionTypes.GET_ALL_ORDERS_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\nexport const getAllOrders = (filter) => {\r\n    return async dispatch => {\r\n        dispatch(getAllOrdersInit());\r\n        try {\r\n            let order = [];\r\n            let query = '', res2;\r\n\r\n            const res = await axios.get(`/api/v1/orders`)\r\n\r\n            if (filter !== 'All Orders') {\r\n                query = `?status=${filter}`\r\n                res2 = await axios.get(`/api/v1/orders${query}`)\r\n\r\n                Object.keys(res2.data.orders).map(el => {\r\n                    order.push({\r\n                        ...res2.data.orders[el],\r\n                        orders: [...res.data.orders[el].customOrders, ...res.data.orders[el].menuOrders],\r\n                        customOrders: null,\r\n                        menuOrders: null,\r\n                    })\r\n                    return order;\r\n                })\r\n\r\n\r\n            }\r\n            let totalOrders = res.data.orders.length;\r\n            let totalPrice = 0;\r\n            let pendingOrders = 0;\r\n            let completedOrders = 0;\r\n\r\n            Object.keys(res.data.orders).map(el => {\r\n                if (res.data.orders[el].status === 'pending') {\r\n                    pendingOrders += 1;\r\n                } else if (res.data.orders[el].status === 'delivered') {\r\n                    completedOrders += 1;\r\n                }\r\n\r\n                if (res.data.orders[el].status !== 'cancelled') totalPrice += res.data.orders[el].price;\r\n\r\n\r\n                if (filter === 'All Orders') {\r\n                    order.push({\r\n                        ...res.data.orders[el],\r\n                        orders: [...res.data.orders[el].customOrders, ...res.data.orders[el].menuOrders],\r\n                        customOrders: null,\r\n                        menuOrders: null,\r\n                    })\r\n                    return order;\r\n                }\r\n                return '';\r\n            })\r\n\r\n\r\n            dispatch(getAllOrdersSuccess({ order, totalOrders, pendingOrders, completedOrders, totalPrice }));\r\n\r\n        } catch (err) {\r\n            const error = { ...err }.response\r\n            dispatch(getAllOrdersFailed(error));\r\n        }\r\n    }\r\n}\r\n///////////////////////////////////////////////////////////////\r\n\r\nexport const updateOrderStatusAdminInit = () => {\r\n    return {\r\n        type: actionTypes.UPDATE_ORDER_ADMIN_STATUS_INIT\r\n    }\r\n}\r\n\r\nexport const updateOrderStatusAdminSuccess = (res) => {\r\n    return {\r\n        type: actionTypes.UPDATE_ORDER_ADMIN_STATUS_SUCCESS,\r\n        response: res\r\n    }\r\n}\r\n\r\nexport const updateOrderStatusAdminFailed = (error) => {\r\n    return {\r\n        type: actionTypes.UPDATE_ORDER_ADMIN_STATUS_FAILED,\r\n        error\r\n    }\r\n}\r\n\r\n\r\nexport const updateOrderStatusAdmin = ({ status, _id }) => {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await axios({\r\n                url: `/api/v1/orders/${_id}`,\r\n                method: 'PATCH',\r\n                data: { status }\r\n            })\r\n            dispatch(updateOrderStatusAdminSuccess(res.data))\r\n        } catch (err) {\r\n            dispatch(updateOrderStatusAdminSuccess(err.response.data))\r\n        }\r\n    }\r\n}\r\n////////////////////////////////////////////////////////////////////////\r\n\r\nexport const getOrderInit = () => {\r\n    return {\r\n        type: actionTypes.GET_ORDER_INIT\r\n    }\r\n}\r\n\r\nexport const getOrderSuccess = (order) => {\r\n    return {\r\n        type: actionTypes.GET_ORDER_SUCCESS,\r\n        order\r\n    }\r\n}\r\n\r\nexport const getOrderFailed = error => {\r\n    return {\r\n        type: actionTypes.GET_ORDER_SUCCESS,\r\n        error\r\n    }\r\n}\r\n\r\n\r\nexport const getOrder = (id) => {\r\n    return async dispatch => {\r\n        dispatch(getOrderInit())\r\n        try {\r\n            const res = await axios({\r\n                url: `/api/v1/orders/${id}`,\r\n                method: 'get',\r\n            })\r\n\r\n            let order;\r\n\r\n            let customOrders = [];\r\n\r\n            res.data.order.customOrders.map(el => {\r\n                customOrders.push({\r\n                    _id: {\r\n                        ingredients: el.ingredients,\r\n                        title: el.name,\r\n                        foodType: el.foodType,\r\n                        _id: el._id,\r\n                        photo: el.photo,\r\n                        price: el.price,\r\n                    },\r\n                    items: parseInt(el.items),\r\n                })\r\n                return customOrders;\r\n            })\r\n\r\n            order = {\r\n                ...res.data.order,\r\n                orders: [...customOrders, ...res.data.order.menuOrders],\r\n                customOrders: null,\r\n                menuOrders: null,\r\n            }\r\n            dispatch(getOrderSuccess(order))\r\n\r\n        } catch (err) {\r\n            dispatch(getOrderFailed(err.response.data))\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ListItem = props => {\r\n    return (\r\n        <Link to={props.to ? props.to : '#'} className={`list__item ${props.className}`} style={{ listStyle: 'none' }} >\r\n            {props.children}\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\n\r\nconst StatusCard = props => {\r\n    return (\r\n        <div className={`card__status ${props.className}`}>\r\n            <h2>{props.heading}</h2>\r\n            <p>{props.value}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default StatusCard\r\n","import React from 'react';\r\n\r\nimport ListItem from '../../../../Shared/Components/List/ListItem';\r\n\r\nconst ListItemOrders = props => {\r\n    let date = `${props.date}`.split('T');\r\n    let hours = new Date(props.date).getHours()\r\n    let minutes = new Date(props.date).getMinutes()\r\n    let seconds = new Date(props.date).getSeconds()\r\n    let time = `${hours}:${minutes}:${seconds}`\r\n\r\n    date = `${date[0]}\\n${time}`\r\n\r\n    return (\r\n        <ListItem\r\n            className={`orders__list-item orders__list-item-${props.status}`} to={props.to} >\r\n            <p className=\"orders__list-item-date\">{date}</p>\r\n            <h3 className=\"orders__list-item-name\">#{props.id} ({props.results})</h3>\r\n            <h2 className=\"orders__list-item-price\">Rs {props.price}</h2>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default ListItemOrders;\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport ListItem from '../User/components/ListItemOrders';\r\nimport Loader from '../../../Shared/Components/Loader/Loader';\r\nimport StatusCard from './StatusCard';\r\n\r\nimport { onChangeFormInput } from '../../../Shared/Utils/formInput';\r\n\r\nclass Orders extends Component {\r\n    state = {\r\n        formInput: {\r\n            orders: 'pending'\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.getAllOrders(this.state.formInput.orders);\r\n        if (!this.props.user) {\r\n            this.props.history.push('/login')\r\n        }\r\n    }\r\n\r\n    onChangeHandler = e => {\r\n        let formInput = onChangeFormInput(e, { ...this.state })\r\n        this.setState({ ...formInput })\r\n    }\r\n\r\n\r\n    onFilterHandler = () => {\r\n        this.props.getAllOrders(this.state.formInput.orders)\r\n    }\r\n\r\n    render() {\r\n        let orders = this.props.orders;\r\n\r\n        if (this.props.loading) {\r\n            return <div className=\"u-flex-center dashboard__dashboard u-bg-white u-vh-100\"><Loader /></div>\r\n        }\r\n\r\n        if (!this.props.orders) {\r\n            return <h4 className=\"u-text-success\">You have no orders</h4>\r\n        }\r\n\r\n        return (\r\n            <div className={`orders orders-status-${this.props.showOrdersStatus} dashboard__dashboard`}>\r\n                <h2 className=\"orders__heading heading-1 u-text-primary\">\r\n                    {this.props.heading}\r\n                </h2>\r\n                {this.props.showOrdersStatus && <h2 className=\"orders__price heading-2\">\r\n                    <span className=\"u-text-success u-ftwt-400\">Total Amount:&nbsp;</span>\r\n                    <span className=\"u-text-tertiary\">Rs {this.props.totalOrdersPrice.toFixed(2)}</span>\r\n                </h2>}\r\n                {this.props.showOrdersStatus && <div\r\n                    className={`orders__status`}>\r\n                    <StatusCard className=\"u-text-danger\" heading=\"total Orders\" value={this.props.totalOrders} />\r\n                    <StatusCard className=\"u-text-grey-dark\" heading=\"Cancelled Orders\" value={this.props.totalCancelledOrders} />\r\n                    <StatusCard className=\"u-text-success\" heading=\"Delivered orders\" value={this.props.totalCompletedOrders} />\r\n                    <StatusCard className=\"u-text-danger\" heading=\"pending orders\" value={this.props.totalPendingOrders} />\r\n                </div>}\r\n                {this.props.showOrdersStatus &&\r\n                    <div className=\"form__group u-text-center orders__filter\">\r\n                        <select name=\"orders\" id=\"orders\" className=\"form__input u-mr-2\"\r\n                            onChange={this.onChangeHandler}\r\n                            value={this.state.formInput.orders}\r\n                        >\r\n                            <option value=\"pending\">Pending Orders</option>\r\n                            <option value=\"All Orders\">All Orders</option>\r\n                            <option value=\"delivered\">Delivered Orders</option>\r\n                            <option value=\"cancelled\">Cancelled Orders</option>\r\n                        </select>\r\n                        <button\r\n                            onClick={this.onFilterHandler}\r\n                            type=\"submit\" className=\"btn__primary btn\">\r\n                            Filter\r\n                        </button>\r\n                    </div>\r\n                }\r\n                <div className=\"orders__list\">\r\n                    {orders.length > 0\r\n                        ? orders.map(el => {\r\n                            return <ListItem\r\n                                id={el._id}\r\n                                results={el.orders.length}\r\n                                price={el.price}\r\n                                date={el.createdAt}\r\n                                status={el.status}\r\n                                to={`${this.props.match.url}/${el._id}`}\r\n                            />\r\n                        })\r\n                        : <h4 className=\"orders__list--empty\">There are no Orders Left</h4>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Orders; \r\n"],"sourceRoot":""}